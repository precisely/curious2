# Define a main server config block for jetty.
upstream main {
	# kube-dns will resolve jetty-svc query to IP address of running jetty pod.
	server jetty-svc-precisely.prod-curious:8080;
}


# upstream created to handle challenge response from letsencrypt server.
upstream letsencrypt {
	server letsencrypt-svc-precisely.prod-curious:80;
}

# Set default error page for maintenance mode
error_page 403 /error403.html;

log_format notice '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" \n';

server {
	listen 80;
	server_name precise.ly www.precise.ly;

	location /.well-known/acme-challenge {
		proxy_set_header  Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-Host $host;
		proxy_set_header X-Forwarded-Server $host;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

		proxy_pass http://letsencrypt/.well-known/acme-challenge;
	}

	location / {
		rewrite ^ https://$server_name$request_uri? permanent;
	}
}

server {

    listen 443 ssl;
    server_name precise.ly www.precise.ly;

    # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
    ssl on;
    ssl_certificate /etc/nginx/nginx-ssl/tls.crt;
    ssl_certificate_key /etc/nginx/nginx-ssl/tls.key;
    ssl_session_cache shared:SSL:10m;

    # intermediate configuration
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers         ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS;
    ssl_prefer_server_ciphers on;

    # Diffie-Hellman parameter for DHE ciphersuites
    ssl_dhparam /etc/nginx/nginx-ssl/dhparam;

    # Storing nginx error logs on Persistent storage on HostVM.
    error_log  /home/precisely/logs/nginx/error.log warn;
    access_log /home/precisely/logs/nginx/access.log notice;

    # Regex added to redirect Internet Bot requests to server directly without loading client side app.
    if ($args ~ _escaped_fragment_=/?(.*)) {
        set $path $1;
        rewrite ^ http://$host$request_uri? last;
    }

    root /home/curious/www;

    location ~ ^\/robots.txt {
        alias /home/curious/www/robots.txt;
    }

    location ~ ^\/[a-zA-Z]+ {
        expires -1;

        proxy_set_header  Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://main;
    }

    location / {
        expires -1;

        proxy_set_header  Host  $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Server $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://main/home/login;
    }

    location /error403.html {
        # Specifies that a given location can only be used for internal requests.
        # Means users should not be able to directly browse this URL
        # http://nginx.org/en/docs/http/ngx_http_core_module.html#internal
        #internal;

        root /etc/nginx/html;
        # And allow this location so that the "deny" directive at http level should not block this page to render
        allow all;
    }
}